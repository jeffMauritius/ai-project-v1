// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  email         String    @unique
  name          String?
  password      String
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  profile       Profile?
  venues        Venue[]   @relation("VenueOwner")
  reviews       Review[]
  messages      Message[]
  events        Event[]
}

model Profile {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @unique @db.ObjectId
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  avatar      String?
  phone       String?
  address     String?
  company     String?
  website     String?
  bio         String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Venue {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  location    String
  capacity    Int
  price       Float
  images      String[]
  amenities   String[]
  ownerId     String    @db.ObjectId
  owner       User      @relation("VenueOwner", fields: [ownerId], references: [id])
  reviews     Review[]
  events      Event[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  rating    Int
  content   String
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  venueId   String   @db.ObjectId
  venue     Venue    @relation(fields: [venueId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  senderId  String   @db.ObjectId
  sender    User     @relation(fields: [senderId], references: [id])
  chatId    String   @db.ObjectId
  chat      Chat     @relation(fields: [chatId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Chat {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  messages  Message[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Event {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  date        DateTime
  guestCount  Int
  budget      Float
  status      EventStatus @default(PLANNING)
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  venueId     String?  @db.ObjectId
  venue       Venue?   @relation(fields: [venueId], references: [id])
  guests      Guest[]
  tasks       Task[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Guest {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String
  status    GuestStatus @default(PENDING)
  tableNo   Int?
  eventId   String   @db.ObjectId
  event     Event    @relation(fields: [eventId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Task {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  dueDate     DateTime?
  completed   Boolean   @default(false)
  eventId     String    @db.ObjectId
  event       Event     @relation(fields: [eventId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum Role {
  USER
  PARTNER
  ADMIN
}

enum EventStatus {
  PLANNING
  CONFIRMED
  COMPLETED
  CANCELLED
}

enum GuestStatus {
  PENDING
  CONFIRMED
  DECLINED
}