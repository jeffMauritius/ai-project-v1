import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function fixVenuePhotographerMistakes() {
  console.log('üîç Recherche des √©tablissements mal class√©s comme photographes...')
  
  // Rechercher les partenaires avec serviceType PHOTOGRAPHE qui ont des noms d'√©tablissements
  const photographers = await prisma.partner.findMany({
    where: { serviceType: 'PHOTOGRAPHE' },
    select: { 
      id: true, 
      companyName: true, 
      serviceType: true,
      options: true
    }
  })
  
  console.log(`üìä ${photographers.length} photographes trouv√©s`)
  
  // Identifier les noms qui ressemblent √† des √©tablissements
  const venueKeywords = [
    'ch√¢teau', 'domaine', 'manoir', 'abbaye', 'moulin', 'ferme', 'salle', 'terrasses',
    'r√©sidence', 'villa', 'mas', 'bastide', 'clos', 'parc', 'jardin', 'bois', 'for√™t',
    'grand', 'petit', 'nouveau', 'ancien', 'royal', 'imp√©rial', 'noble'
  ]
  
  const suspiciousPhotographers = photographers.filter(photographer => {
    const name = photographer.companyName.toLowerCase()
    return venueKeywords.some(keyword => name.includes(keyword))
  })
  
  console.log(`üö® ${suspiciousPhotographers.length} photographes suspects trouv√©s`)
  
  // Corriger automatiquement
  console.log('\nüîß Correction en cours...')
  
  let correctedCount = 0
  for (const photographer of suspiciousPhotographers) {
    try {
      await prisma.partner.update({
        where: { id: photographer.id },
        data: { serviceType: 'LIEU' }
      })
      correctedCount++
      
      if (correctedCount % 100 === 0) {
        console.log(`‚úÖ ${correctedCount}/${suspiciousPhotographers.length} corrig√©s`)
      }
    } catch (error) {
      console.error(`‚ùå Erreur pour ${photographer.companyName}:`, error)
    }
  }
  
  console.log(`\nüéâ Correction termin√©e: ${correctedCount} √©tablissements reclass√©s comme LIEU`)
  
  // V√©rifier le r√©sultat
  const remainingPhotographers = await prisma.partner.count({
    where: { serviceType: 'PHOTOGRAPHE' }
  })
  
  const venues = await prisma.partner.count({
    where: { serviceType: 'LIEU' }
  })
  
  console.log(`\nüìä R√©sultat final:`)
  console.log(`- Photographes: ${remainingPhotographers}`)
  console.log(`- Lieux: ${venues}`)
  
  await prisma.$disconnect()
}

fixVenuePhotographerMistakes().catch(console.error)
