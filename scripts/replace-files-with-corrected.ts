import fs from 'fs'
import path from 'path'

function replaceOriginalFilesWithCorrected() {
  console.log('üîÑ REMPLACEMENT DES FICHIERS ORIGINAUX PAR LES VERSIONS CORRIG√âES\n')
  
  const dataDir = path.join(__dirname, '..', 'data')
  
  // Liste des fichiers √† remplacer
  const filesToReplace = [
    'beauty.json', 'caterers.json', 'decorators.json', 'dresses.json', 'entertainment.json',
    'florist-decoration.json', 'florists.json', 'gifts.json', 'honeymoon.json', 'invitations.json',
    'jewelry.json', 'music-vendors.json', 'officiants.json', 'organization.json', 'photographers.json',
    'suits.json', 'transport.json', 'videographers.json', 'wedding-cakes.json', 'wine-spirits.json'
  ]
  
  let replacedCount = 0
  let skippedCount = 0
  
  for (const fileName of filesToReplace) {
    const originalPath = path.join(dataDir, fileName)
    const correctedPath = path.join(dataDir, `${fileName.replace('.json', '')}-corrected.json`)
    
    // V√©rifier que le fichier corrig√© existe
    if (!fs.existsSync(correctedPath)) {
      console.log(`‚ö†Ô∏è Fichier corrig√© non trouv√©: ${fileName}`)
      skippedCount++
      continue
    }
    
    // Cr√©er une sauvegarde de l'original
    const backupPath = path.join(dataDir, `${fileName.replace('.json', '')}-backup.json`)
    
    try {
      // Sauvegarder l'original
      fs.copyFileSync(originalPath, backupPath)
      console.log(`üíæ Sauvegarde cr√©√©e: ${fileName} ‚Üí ${fileName.replace('.json', '')}-backup.json`)
      
      // Remplacer par la version corrig√©e
      fs.copyFileSync(correctedPath, originalPath)
      console.log(`‚úÖ Remplac√©: ${fileName}`)
      
      // Supprimer le fichier corrig√© temporaire
      fs.unlinkSync(correctedPath)
      console.log(`üóëÔ∏è Supprim√©: ${fileName.replace('.json', '')}-corrected.json`)
      
      replacedCount++
      
    } catch (error) {
      console.error(`‚ùå Erreur lors du remplacement de ${fileName}:`, error)
      skippedCount++
    }
  }
  
  console.log('\nüìä R√âSULTATS:')
  console.log(`‚úÖ ${replacedCount} fichiers remplac√©s`)
  console.log(`‚ö†Ô∏è ${skippedCount} fichiers ignor√©s`)
  
  console.log('\nüéØ √âTAPES SUIVANTES:')
  console.log('1. Tester la recherche pour v√©rifier la pertinence')
  console.log('2. V√©rifier que les r√©sultats correspondent aux bons types')
  console.log('3. Les fichiers de sauvegarde (*-backup.json) sont disponibles si besoin')
  
  return { replacedCount, skippedCount }
}

// Ex√©cution
if (require.main === module) {
  try {
    const result = replaceOriginalFilesWithCorrected()
    
    console.log('\nüéâ REMPLACEMENT TERMIN√â !')
    console.log(`üìä ${result.replacedCount} fichiers mis √† jour`)
    
  } catch (error) {
    console.error('‚ùå Erreur lors du remplacement:', error)
  }
}

export { replaceOriginalFilesWithCorrected }


