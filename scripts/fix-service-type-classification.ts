import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function fixServiceTypeClassification() {
  console.log('üîß Correction des classifications de serviceType...\n')

  try {
    let correctedCount = 0

    // 1. Corriger les photographes mal class√©s comme VOITURE
    console.log('üì∏ Correction des photographes mal class√©s comme VOITURE...')
    
    const photographersToFix = await prisma.partner.findMany({
      where: {
        serviceType: 'VOITURE',
        OR: [
          { companyName: { contains: 'Photo', mode: 'insensitive' } },
          { companyName: { contains: 'Photographe', mode: 'insensitive' } },
          { companyName: { contains: 'Photography', mode: 'insensitive' } },
          { companyName: { contains: 'Pix', mode: 'insensitive' } },
          { companyName: { contains: 'Shot', mode: 'insensitive' } },
          { description: { contains: 'photographe', mode: 'insensitive' } },
          { description: { contains: 'photographie', mode: 'insensitive' } },
          { description: { contains: 'photojournalist', mode: 'insensitive' } },
          { description: { contains: 'capture', mode: 'insensitive' } },
          { description: { contains: 'clich√©', mode: 'insensitive' } },
          { description: { contains: 'reportage', mode: 'insensitive' } }
        ]
      },
      select: {
        id: true,
        companyName: true,
        serviceType: true
      }
    })

    console.log(`üìä ${photographersToFix.length} photographes √† corriger`)

    for (const photographer of photographersToFix) {
      await prisma.partner.update({
        where: { id: photographer.id },
        data: { serviceType: 'PHOTOGRAPHE' }
      })
      correctedCount++
      
      if (correctedCount % 100 === 0) {
        console.log(`  ‚úÖ ${correctedCount} photographes corrig√©s...`)
      }
    }

    console.log(`‚úÖ ${photographersToFix.length} photographes corrig√©s de VOITURE vers PHOTOGRAPHE`)

    // 2. Corriger les vid√©astes mal class√©s
    console.log('\nüé• Correction des vid√©astes mal class√©s...')
    
    const videographersToFix = await prisma.partner.findMany({
      where: {
        serviceType: { not: 'VIDEO' },
        OR: [
          { companyName: { contains: 'Video', mode: 'insensitive' } },
          { companyName: { contains: 'Vid√©aste', mode: 'insensitive' } },
          { companyName: { contains: 'Film', mode: 'insensitive' } },
          { description: { contains: 'vid√©o', mode: 'insensitive' } },
          { description: { contains: 'film', mode: 'insensitive' } },
          { description: { contains: 'montage', mode: 'insensitive' } }
        ]
      },
      select: {
        id: true,
        companyName: true,
        serviceType: true
      }
    })

    console.log(`üìä ${videographersToFix.length} vid√©astes √† corriger`)

    for (const videographer of videographersToFix) {
      await prisma.partner.update({
        where: { id: videographer.id },
        data: { serviceType: 'VIDEO' }
      })
      correctedCount++
    }

    console.log(`‚úÖ ${videographersToFix.length} vid√©astes corrig√©s vers VIDEO`)

    // 3. Corriger les traiteurs mal class√©s
    console.log('\nüçΩÔ∏è Correction des traiteurs mal class√©s...')
    
    const caterersToFix = await prisma.partner.findMany({
      where: {
        serviceType: { not: 'TRAITEUR' },
        OR: [
          { companyName: { contains: 'Traiteur', mode: 'insensitive' } },
          { companyName: { contains: 'Catering', mode: 'insensitive' } },
          { companyName: { contains: 'Cuisine', mode: 'insensitive' } },
          { description: { contains: 'traiteur', mode: 'insensitive' } },
          { description: { contains: 'catering', mode: 'insensitive' } },
          { description: { contains: 'cuisine', mode: 'insensitive' } },
          { description: { contains: 'gastronomie', mode: 'insensitive' } }
        ]
      },
      select: {
        id: true,
        companyName: true,
        serviceType: true
      }
    })

    console.log(`üìä ${caterersToFix.length} traiteurs √† corriger`)

    for (const caterer of caterersToFix) {
      await prisma.partner.update({
        where: { id: caterer.id },
        data: { serviceType: 'TRAITEUR' }
      })
      correctedCount++
    }

    console.log(`‚úÖ ${caterersToFix.length} traiteurs corrig√©s vers TRAITEUR`)

    // 4. Corriger les DJ/musiciens mal class√©s
    console.log('\nüéµ Correction des DJ/musiciens mal class√©s...')
    
    const musiciansToFix = await prisma.partner.findMany({
      where: {
        serviceType: { not: 'MUSIQUE' },
        OR: [
          { companyName: { contains: 'DJ', mode: 'insensitive' } },
          { companyName: { contains: 'Music', mode: 'insensitive' } },
          { companyName: { contains: 'Musique', mode: 'insensitive' } },
          { companyName: { contains: 'Orchestre', mode: 'insensitive' } },
          { description: { contains: 'dj', mode: 'insensitive' } },
          { description: { contains: 'musique', mode: 'insensitive' } },
          { description: { contains: 'orchestre', mode: 'insensitive' } },
          { description: { contains: 'sonorisation', mode: 'insensitive' } }
        ]
      },
      select: {
        id: true,
        companyName: true,
        serviceType: true
      }
    })

    console.log(`üìä ${musiciansToFix.length} musiciens √† corriger`)

    for (const musician of musiciansToFix) {
      await prisma.partner.update({
        where: { id: musician.id },
        data: { serviceType: 'MUSIQUE' }
      })
      correctedCount++
    }

    console.log(`‚úÖ ${musiciansToFix.length} musiciens corrig√©s vers MUSIQUE`)

    // 5. Statistiques finales
    console.log('\nüìä Statistiques finales:')
    console.log(`üîß Total des corrections: ${correctedCount}`)

    // V√©rification des r√©sultats
    const finalCounts = await prisma.partner.groupBy({
      by: ['serviceType'],
      _count: {
        serviceType: true
      },
      orderBy: {
        _count: {
          serviceType: 'desc'
        }
      }
    })

    console.log('\nüìä Nouveaux comptages par serviceType:')
    finalCounts.forEach(group => {
      console.log(`  ${group.serviceType}: ${group._count.serviceType}`)
    })

  } catch (error) {
    console.error('‚ùå Erreur lors de la correction:', error)
  } finally {
    await prisma.$disconnect()
  }
}

fixServiceTypeClassification()




