#!/bin/bash

# Script de restauration MongoDB pour le projet AI
# Ce script restaure un backup MongoDB pr√©c√©demment cr√©√©

set -e  # Arr√™ter le script en cas d'erreur

# Configuration
BACKUP_DIR="./backups"

# Couleurs pour les logs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üîÑ Script de restauration MongoDB${NC}"
echo -e "${BLUE}===============================${NC}"

# V√©rifier si le dossier de backup existe
if [[ ! -d "$BACKUP_DIR" ]]; then
    echo -e "${RED}‚ùå Dossier de backup non trouv√©: ${BACKUP_DIR}${NC}"
    exit 1
fi

# Lister les backups disponibles
echo -e "${YELLOW}üìã Backups disponibles:${NC}"
ls -la "$BACKUP_DIR" | grep "mongodb_backup_" | awk '{print $9}' | nl

echo -e "${YELLOW}‚ùì Veuillez entrer le num√©ro du backup √† restaurer:${NC}"
read -p "Num√©ro du backup: " BACKUP_NUMBER

# R√©cup√©rer le nom du backup s√©lectionn√©
BACKUP_NAME=$(ls "$BACKUP_DIR" | grep "mongodb_backup_" | sed -n "${BACKUP_NUMBER}p")

if [[ -z "$BACKUP_NAME" ]]; then
    echo -e "${RED}‚ùå Backup non trouv√©${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ Backup s√©lectionn√©: ${BACKUP_NAME}${NC}"

# V√©rifier le contenu du backup
BACKUP_PATH="$BACKUP_DIR/$BACKUP_NAME"
if [[ ! -d "$BACKUP_PATH" ]]; then
    echo -e "${RED}‚ùå Dossier de backup non trouv√©: ${BACKUP_PATH}${NC}"
    exit 1
fi

# Afficher les informations du backup
if [[ -f "$BACKUP_PATH/metadata.txt" ]]; then
    echo -e "${YELLOW}üìÑ Informations du backup:${NC}"
    cat "$BACKUP_PATH/metadata.txt"
fi

# Trouver la base de donn√©es dans le backup
DATABASE_DIR=$(find "$BACKUP_PATH" -maxdepth 1 -type d -name "*" | grep -v "$BACKUP_PATH$" | head -1)
DATABASE_NAME=$(basename "$DATABASE_DIR")

if [[ -z "$DATABASE_NAME" ]]; then
    echo -e "${RED}‚ùå Base de donn√©es non trouv√©e dans le backup${NC}"
    exit 1
fi

echo -e "${GREEN}üìä Base de donn√©es d√©tect√©e: ${DATABASE_NAME}${NC}"

# Afficher les collections disponibles
echo -e "${YELLOW}üìã Collections dans le backup:${NC}"
ls -la "$DATABASE_DIR" | grep -v "^total" | awk '{print $9}' | grep -v "^$"

# Demander confirmation
echo -e "${RED}‚ö†Ô∏è  ATTENTION: Cette op√©ration va √©craser la base de donn√©es actuelle!${NC}"
echo -e "${YELLOW}‚ùì Voulez-vous continuer? (oui/non):${NC}"
read -p "Confirmation: " CONFIRMATION

if [[ "$CONFIRMATION" != "oui" ]]; then
    echo -e "${YELLOW}‚ùå Restauration annul√©e${NC}"
    exit 0
fi

# Fonction pour extraire les informations de connexion depuis l'URL MongoDB
extract_mongo_info() {
    local url="$1"
    
    # Extraire le host et le port
    if [[ $url =~ mongodb://([^:]+):([^@]+)@([^:]+):([^/]+)/(.+) ]]; then
        USERNAME="${BASH_REMATCH[1]}"
        PASSWORD="${BASH_REMATCH[2]}"
        HOST="${BASH_REMATCH[3]}"
        PORT="${BASH_REMATCH[4]}"
        DATABASE="${BASH_REMATCH[5]}"
    elif [[ $url =~ mongodb://([^:]+):([^/]+)/(.+) ]]; then
        HOST="${BASH_REMATCH[1]}"
        PORT="${BASH_REMATCH[2]}"
        DATABASE="${BASH_REMATCH[3]}"
    else
        echo -e "${RED}‚ùå Format d'URL MongoDB non reconnu${NC}"
        return 1
    fi
    
    echo -e "${GREEN}‚úÖ Informations de connexion extraites:${NC}"
    echo -e "   Host: ${HOST}"
    echo -e "   Port: ${PORT}"
    echo -e "   Database: ${DATABASE}"
    if [[ -n "$USERNAME" ]]; then
        echo -e "   Username: ${USERNAME}"
    fi
}

RESTORE_SUCCESS=false

# M√©thode 1: Utiliser la variable d'environnement DATABASE_URL
if [[ -n "$DATABASE_URL" ]]; then
    echo -e "${YELLOW}üîç M√©thode 1: Variable d'environnement DATABASE_URL${NC}"
    extract_mongo_info "$DATABASE_URL"
    
    if [[ -n "$USERNAME" && -n "$PASSWORD" ]]; then
        mongorestore --host "$HOST:$PORT" --username "$USERNAME" --password "$PASSWORD" --db "$DATABASE" --drop "$BACKUP_PATH/$DATABASE_NAME"
    else
        mongorestore --host "$HOST:$PORT" --db "$DATABASE" --drop "$BACKUP_PATH/$DATABASE_NAME"
    fi
    RESTORE_SUCCESS=true

# M√©thode 2: Utiliser un fichier .env.local
elif [[ -f ".env.local" ]]; then
    echo -e "${YELLOW}üîç M√©thode 2: Fichier .env.local${NC}"
    DATABASE_URL=$(grep "DATABASE_URL" .env.local | cut -d '=' -f2 | tr -d '"' | tr -d "'")
    
    if [[ -n "$DATABASE_URL" ]]; then
        extract_mongo_info "$DATABASE_URL"
        
        if [[ -n "$USERNAME" && -n "$PASSWORD" ]]; then
            mongorestore --host "$HOST:$PORT" --username "$USERNAME" --password "$PASSWORD" --db "$DATABASE" --drop "$BACKUP_PATH/$DATABASE_NAME"
        else
            mongorestore --host "$HOST:$PORT" --db "$DATABASE" --drop "$BACKUP_PATH/$DATABASE_NAME"
        fi
        RESTORE_SUCCESS=true
    else
        echo -e "${RED}‚ùå DATABASE_URL non trouv√© dans .env.local${NC}"
    fi

# M√©thode 3: Connexion locale MongoDB
else
    echo -e "${YELLOW}üîç M√©thode 3: Connexion locale MongoDB${NC}"
    echo -e "${YELLOW}‚ö†Ô∏è  Tentative de connexion √† MongoDB local (localhost:27017)${NC}"
    
    # V√©rifier si MongoDB est en cours d'ex√©cution
    if pgrep -x "mongod" > /dev/null; then
        echo -e "${GREEN}‚úÖ MongoDB local d√©tect√©${NC}"
        
        echo -e "${YELLOW}‚ùì Nom de la base de donn√©es de destination (ou appuyez sur Entr√©e pour utiliser ${DATABASE_NAME}):${NC}"
        read -p "Database name: " TARGET_DATABASE
        
        if [[ -z "$TARGET_DATABASE" ]]; then
            TARGET_DATABASE="$DATABASE_NAME"
        fi
        
        mongorestore --db "$TARGET_DATABASE" --drop "$BACKUP_PATH/$DATABASE_NAME"
        RESTORE_SUCCESS=true
    else
        echo -e "${RED}‚ùå MongoDB local non d√©tect√©${NC}"
    fi
fi

# V√©rifier le succ√®s de la restauration
if [[ "$RESTORE_SUCCESS" == true ]]; then
    echo -e "${GREEN}‚úÖ Restauration termin√©e avec succ√®s!${NC}"
    echo -e "${GREEN}üìä Base de donn√©es restaur√©e: ${TARGET_DATABASE:-$DATABASE}${NC}"
    
    # Afficher les collections restaur√©es
    echo -e "${GREEN}üìã Collections restaur√©es:${NC}"
    if [[ -n "$TARGET_DATABASE" ]]; then
        mongo "$TARGET_DATABASE" --eval "db.getCollectionNames()" --quiet 2>/dev/null || echo "Impossible de lister les collections"
    fi
    
else
    echo -e "${RED}‚ùå √âchec de la restauration${NC}"
    echo -e "${YELLOW}üí° Suggestions:${NC}"
    echo -e "   1. V√©rifiez que MongoDB est en cours d'ex√©cution"
    echo -e "   2. V√©rifiez les informations de connexion"
    echo -e "   3. V√©rifiez les permissions d'acc√®s"
    echo -e "   4. V√©rifiez que le backup n'est pas corrompu"
    exit 1
fi

echo -e "${BLUE}üéâ Script termin√© avec succ√®s!${NC}"
