import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function cleanEstablishmentsBulletPoints() {
  console.log('ðŸ§¹ Nettoyage des points dans la collection establishments...');
  console.log('===========================================================');
  
  try {
    // Compter avant nettoyage
    const beforeAddress = await prisma.establishment.count({
      where: { address: { startsWith: 'Â·' } }
    });
    
    const beforeCity = await prisma.establishment.count({
      where: { city: { startsWith: 'Â·' } }
    });
    
    console.log(`ðŸ“Š AVANT NETTOYAGE:`);
    console.log(`   address avec points: ${beforeAddress}`);
    console.log(`   city avec points: ${beforeCity}`);
    console.log('');
    
    // Traiter par lots
    let offset = 0;
    const BATCH_SIZE = 1000;
    let updatedCount = 0;
    const startTime = new Date();
    
    console.log('ðŸ§¹ Nettoyage par lots...');
    
    while (true) {
      // RÃ©cupÃ©rer les Ã©tablissements avec des points
      const establishments = await prisma.establishment.findMany({
        where: {
          OR: [
            { address: { startsWith: 'Â·' } },
            { city: { startsWith: 'Â·' } }
          ]
        },
        select: {
          id: true,
          name: true,
          address: true,
          city: true
        },
        skip: offset,
        take: BATCH_SIZE
      });
      
      if (establishments.length === 0) {
        break;
      }
      
      console.log(`ðŸ“¦ Lot ${Math.floor(offset / BATCH_SIZE) + 1} - ${establishments.length} Ã©tablissements`);
      
      // Mettre Ã  jour chaque Ã©tablissement
      for (const establishment of establishments) {
        const updates: any = {};
        
        if (establishment.address?.startsWith('Â·')) {
          updates.address = establishment.address.substring(1).trim();
        }
        
        if (establishment.city?.startsWith('Â·')) {
          updates.city = establishment.city.substring(1).trim();
        }
        
        if (Object.keys(updates).length > 0) {
          await prisma.establishment.update({
            where: { id: establishment.id },
            data: updates
          });
          updatedCount++;
        }
      }
      
      offset += BATCH_SIZE;
      
      // Rapport de progrÃ¨s
      const elapsed = new Date().getTime() - startTime.getTime();
      const elapsedMinutes = Math.floor(elapsed / 60000);
      const elapsedSeconds = Math.floor((elapsed % 60000) / 1000);
      
      console.log(`   âœ… ${updatedCount} Ã©tablissements nettoyÃ©s (${elapsedMinutes}m ${elapsedSeconds}s)`);
      
      // Pause entre les lots
      await new Promise(resolve => setTimeout(resolve, 1000));
    }
    
    // Compter aprÃ¨s nettoyage
    const afterAddress = await prisma.establishment.count({
      where: { address: { startsWith: 'Â·' } }
    });
    
    const afterCity = await prisma.establishment.count({
      where: { city: { startsWith: 'Â·' } }
    });
    
    const endTime = new Date();
    const totalTime = endTime.getTime() - startTime.getTime();
    const totalMinutes = Math.floor(totalTime / 60000);
    const totalSeconds = Math.floor((totalTime % 60000) / 1000);
    
    console.log('');
    console.log('ðŸ“Š APRÃˆS NETTOYAGE:');
    console.log(`   address avec points: ${afterAddress}`);
    console.log(`   city avec points: ${afterCity}`);
    console.log('');
    console.log('ðŸ“ˆ RÃ‰SULTATS:');
    console.log(`   Total Ã©tablissements nettoyÃ©s: ${updatedCount}`);
    console.log(`   Points supprimÃ©s de address: ${beforeAddress - afterAddress}`);
    console.log(`   Points supprimÃ©s de city: ${beforeCity - afterCity}`);
    console.log(`   Temps total: ${totalMinutes}m ${totalSeconds}s`);
    
  } catch (error) {
    console.error('ðŸ’¥ Erreur:', error);
  } finally {
    await prisma.$disconnect();
  }
}

cleanEstablishmentsBulletPoints();
