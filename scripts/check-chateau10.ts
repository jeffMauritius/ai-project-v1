import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function checkChateau10() {
  try {
    console.log('üîç V√©rification de CHATEAU 10...')

    // R√©cup√©rer un utilisateur existant
    const user = await prisma.user.findFirst()
    
    if (!user) {
      console.log('‚ùå Aucun utilisateur trouv√©.')
      return
    }

    console.log(`üë§ Utilisateur: ${user.email}`)

    // R√©cup√©rer toutes les consultations
    const consultations = await prisma.consultedStorefront.findMany({
      where: { userId: user.id }
    })

    console.log(`\nüìã Toutes les consultations:`)
    consultations.forEach((consultation, index) => {
      console.log(`${index + 1}. ${consultation.name} (${consultation.storefrontId}) - ${consultation.status}`)
    })

    // Chercher CHATEAU 10 sp√©cifiquement
    const chateau10Consultation = consultations.find(c => c.name.includes('CHATEAU 10') || c.name.includes('Ch√¢teau 10'))
    
    if (chateau10Consultation) {
      console.log(`\nüè∞ CHATEAU 10 trouv√© dans les consultations:`)
      console.log(`   - ID: ${chateau10Consultation.id}`)
      console.log(`   - StorefrontId: ${chateau10Consultation.storefrontId}`)
      console.log(`   - Statut: ${chateau10Consultation.status}`)
      console.log(`   - Type: ${chateau10Consultation.type}`)
    } else {
      console.log(`\n‚ùå CHATEAU 10 non trouv√© dans les consultations`)
    }

    // R√©cup√©rer tous les favoris
    const favorites = await prisma.favorite.findMany({
      where: { userId: user.id }
    })

    console.log(`\nüíñ Tous les favoris:`)
    favorites.forEach((favorite, index) => {
      console.log(`${index + 1}. ${favorite.name} (${favorite.storefrontId})`)
    })

    // Chercher CHATEAU 10 dans les favoris
    const chateau10Favorite = favorites.find(f => f.name.includes('CHATEAU 10') || f.name.includes('Ch√¢teau 10'))
    
    if (chateau10Favorite) {
      console.log(`\nüè∞ CHATEAU 10 trouv√© dans les favoris:`)
      console.log(`   - ID: ${chateau10Favorite.id}`)
      console.log(`   - StorefrontId: ${chateau10Favorite.storefrontId}`)
      console.log(`   - Nom: ${chateau10Favorite.name}`)
      
      // V√©rifier si la consultation correspond
      const matchingConsultation = consultations.find(c => c.storefrontId === chateau10Favorite.storefrontId)
      if (matchingConsultation) {
        console.log(`\n‚úÖ Consultation correspondante trouv√©e:`)
        console.log(`   - Statut actuel: ${matchingConsultation.status}`)
        console.log(`   - Doit √™tre: SAVED`)
        
        if (matchingConsultation.status !== 'SAVED') {
          console.log(`\n‚ö†Ô∏è  Mise √† jour du statut vers SAVED...`)
          const updated = await prisma.consultedStorefront.update({
            where: { id: matchingConsultation.id },
            data: { status: 'SAVED' }
          })
          console.log(`‚úÖ Statut mis √† jour: ${updated.status}`)
        }
      } else {
        console.log(`\n‚ùå Aucune consultation trouv√©e avec le storefrontId: ${chateau10Favorite.storefrontId}`)
        console.log(`Cr√©ation d'une nouvelle consultation...`)
        
        const newConsultation = await prisma.consultedStorefront.create({
          data: {
            storefrontId: chateau10Favorite.storefrontId,
            name: chateau10Favorite.name,
            type: 'VENUE',
            serviceType: 'Lieu de r√©ception',
            status: 'SAVED',
            userId: user.id
          }
        })
        console.log(`‚úÖ Nouvelle consultation cr√©√©e: ${newConsultation.name} - ${newConsultation.status}`)
      }
    } else {
      console.log(`\n‚ùå CHATEAU 10 non trouv√© dans les favoris`)
    }

  } catch (error) {
    console.error('‚ùå Erreur:', error)
  } finally {
    await prisma.$disconnect()
  }
}

checkChateau10() 