import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function seedConsultedStorefronts() {
  try {
    console.log('üå± D√©but du seeding des vitrines consult√©es...')

    // R√©cup√©rer un utilisateur existant
    const user = await prisma.user.findFirst()
    
    if (!user) {
      console.log('‚ùå Aucun utilisateur trouv√©. Cr√©ez d\'abord un utilisateur.')
      return
    }

    console.log(`üë§ Utilisateur trouv√©: ${user.email}`)

    // Donn√©es d'exemple pour les vitrines consult√©es
    const consultedStorefrontsData = [
      {
        storefrontId: '507f1f77bcf86cd799439011', // ID fictif
        name: 'Ch√¢teau de Vaux-le-Vicomte',
        type: 'VENUE',
        serviceType: 'Lieu de r√©ception',
        status: 'CONSULTED'
      },
      {
        storefrontId: '507f1f77bcf86cd799439012', // ID fictif
        name: 'Studio Lumi√®re',
        type: 'PARTNER',
        serviceType: 'PHOTOGRAPHE',
        status: 'CONSULTED'
      },
      {
        storefrontId: '507f1f77bcf86cd799439013', // ID fictif
        name: 'Cuisine √âtoil√©e',
        type: 'PARTNER',
        serviceType: 'TRAITEUR',
        status: 'SAVED'
      },
      {
        storefrontId: '507f1f77bcf86cd799439014', // ID fictif
        name: 'Espace Moderne Lyon',
        type: 'VENUE',
        serviceType: 'Lieu de r√©ception',
        status: 'CONSULTED'
      },
      {
        storefrontId: '507f1f77bcf86cd799439015', // ID fictif
        name: 'Fleurs & Co',
        type: 'PARTNER',
        serviceType: 'FLORISTE',
        status: 'CONTACTED'
      }
    ]

    // Supprimer les vitrines consult√©es existantes pour cet utilisateur
    await prisma.consultedStorefront.deleteMany({
      where: { userId: user.id }
    })

    console.log('üóëÔ∏è Anciennes vitrines consult√©es supprim√©es')

    // Cr√©er les nouvelles vitrines consult√©es
    for (const data of consultedStorefrontsData) {
      await prisma.consultedStorefront.create({
        data: {
          storefrontId: data.storefrontId,
          name: data.name,
          type: data.type,
          serviceType: data.serviceType,
          status: data.status,
          userId: user.id
        }
      })
    }

    console.log(`‚úÖ ${consultedStorefrontsData.length} vitrines consult√©es cr√©√©es avec succ√®s!`)

    // V√©rifier les donn√©es cr√©√©es
    const createdConsultations = await prisma.consultedStorefront.findMany({
      where: { userId: user.id },
      orderBy: { updatedAt: 'desc' }
    })

    console.log('\nüìã Vitrines consult√©es cr√©√©es:')
    createdConsultations.forEach((consultation: any, index: number) => {
      console.log(`${index + 1}. ${consultation.name} (${consultation.type}) - ${consultation.status}`)
    })

  } catch (error) {
    console.error('‚ùå Erreur lors du seeding:', error)
  } finally {
    await prisma.$disconnect()
  }
}

seedConsultedStorefronts() 