import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function testStripeIntegration() {
  try {
    console.log('üß™ Test de l\'int√©gration Stripe...')

    // V√©rifier que les plans d'abonnement existent
    const plans = await prisma.subscriptionPlan.findMany()
    console.log(`‚úÖ ${plans.length} plans d'abonnement trouv√©s:`)
    plans.forEach(plan => {
      console.log(`   - ${plan.name} (${plan.billingInterval}): ${plan.price}‚Ç¨`)
    })

    // V√©rifier que les champs Stripe sont pr√©sents dans le mod√®le User
    const userSample = await prisma.user.findFirst({
      select: {
        id: true,
        email: true,
        stripeCustomerId: true,
        stripePaymentMethodId: true
      }
    })

    if (userSample) {
      console.log('‚úÖ Mod√®le User mis √† jour avec les champs Stripe:')
      console.log(`   - stripeCustomerId: ${userSample.stripeCustomerId || 'null'}`)
      console.log(`   - stripePaymentMethodId: ${userSample.stripePaymentMethodId || 'null'}`)
    }

    // V√©rifier qu'il n'y a pas de donn√©es de test
    const subscriptions = await prisma.subscription.count()
    const payments = await prisma.payment.count()
    const billingInfo = await prisma.billingInfo.count()

    console.log('‚úÖ Donn√©es nettoy√©es:')
    console.log(`   - Abonnements: ${subscriptions}`)
    console.log(`   - Paiements: ${payments}`)
    console.log(`   - Informations de facturation: ${billingInfo}`)

    console.log('üéâ Int√©gration Stripe pr√™te pour les tests!')
    console.log('üí° Vous pouvez maintenant:')
    console.log('   1. Aller sur http://localhost:3000/partner-dashboard/subscription')
    console.log('   2. S√©lectionner un plan')
    console.log('   3. Tester avec les cartes Stripe de test')
    console.log('   4. V√©rifier que l\'abonnement est cr√©√© correctement')

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error)
  } finally {
    await prisma.$disconnect()
  }
}

testStripeIntegration()
