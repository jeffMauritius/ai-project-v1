import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function seedSearchHistory() {
  try {
    console.log('üå± D√©but du seeding de l\'historique des recherches...')

    // R√©cup√©rer un utilisateur existant
    const user = await prisma.user.findFirst()
    
    if (!user) {
      console.log('‚ùå Aucun utilisateur trouv√©. Cr√©ez d\'abord un utilisateur.')
      return
    }

    console.log(`üë§ Utilisateur trouv√©: ${user.email}`)

    // Donn√©es d'exemple pour l'historique des recherches
    const searchHistoryData = [
      {
        query: 'Ch√¢teau avec jardin pr√®s de Paris',
        type: 'LIEU',
        results: [
          { name: 'Ch√¢teau de Vaux-le-Vicomte', status: 'Consult√©' },
          { name: 'Ch√¢teau de Fontainebleau', status: 'Consult√©' },
          { name: 'Ch√¢teau de Chantilly', status: 'Consult√©' }
        ]
      },
      {
        query: 'Photographe style reportage',
        type: 'PRESTATAIRE',
        results: [
          { name: 'Studio Lumi√®re', status: 'Consult√©' },
          { name: 'Capture Moments', status: 'Consult√©' },
          { name: 'Photo √âl√©gance', status: 'Consult√©' }
        ]
      },
      {
        query: 'Traiteur gastronomique pour 100 personnes',
        type: 'PRESTATAIRE',
        results: [
          { name: 'Cuisine √âtoil√©e', status: 'Consult√©' },
          { name: 'Saveurs & Traditions', status: 'Consult√©' },
          { name: 'Gastronomie Paris', status: 'Consult√©' }
        ]
      },
      {
        query: 'Salle de r√©ception moderne Lyon',
        type: 'LIEU',
        results: [
          { name: 'Espace Moderne Lyon', status: 'Consult√©' },
          { name: 'Le Grand H√¥tel', status: 'Consult√©' },
          { name: 'Villa Contemporaine', status: 'Consult√©' }
        ]
      },
      {
        query: 'Fleuriste pour d√©coration de mariage',
        type: 'PRESTATAIRE',
        results: [
          { name: 'Fleurs & Co', status: 'Consult√©' },
          { name: 'Atelier Botanique', status: 'Consult√©' },
          { name: 'Jardin des Fleurs', status: 'Consult√©' }
        ]
      }
    ]

    // Supprimer l'historique existant pour cet utilisateur
    await prisma.searchHistory.deleteMany({
      where: { userId: user.id }
    })

    console.log('üóëÔ∏è Ancien historique supprim√©')

    // Cr√©er les nouvelles entr√©es d'historique
    for (const data of searchHistoryData) {
      await prisma.searchHistory.create({
        data: {
          query: data.query,
          type: data.type,
          results: data.results,
          userId: user.id
        }
      })
    }

    console.log(`‚úÖ ${searchHistoryData.length} entr√©es d'historique cr√©√©es avec succ√®s!`)

    // V√©rifier les donn√©es cr√©√©es
    const createdHistory = await prisma.searchHistory.findMany({
      where: { userId: user.id },
      orderBy: { createdAt: 'desc' }
    })

    console.log('\nüìã Historique cr√©√©:')
    createdHistory.forEach((item: any, index: number) => {
      console.log(`${index + 1}. ${item.query} (${item.type})`)
    })

  } catch (error) {
    console.error('‚ùå Erreur lors du seeding:', error)
  } finally {
    await prisma.$disconnect()
  }
}

seedSearchHistory() 