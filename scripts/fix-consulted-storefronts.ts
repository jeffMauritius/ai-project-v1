import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function fixConsultedStorefronts() {
  try {
    console.log('üîç V√©rification des vitrines consult√©es...')

    // R√©cup√©rer un utilisateur existant
    const user = await prisma.user.findFirst()
    
    if (!user) {
      console.log('‚ùå Aucun utilisateur trouv√©.')
      return
    }

    console.log(`üë§ Utilisateur: ${user.email}`)

    // R√©cup√©rer toutes les vitrines consult√©es
    const consultedStorefronts = await prisma.consultedStorefront.findMany({
      where: { userId: user.id }
    })

    console.log(`üìã ${consultedStorefronts.length} vitrines consult√©es trouv√©es:`)
    consultedStorefronts.forEach((consultation, index) => {
      console.log(`${index + 1}. ${consultation.name} (${consultation.storefrontId}) - ${consultation.status}`)
    })

    // R√©cup√©rer tous les favoris
    const favorites = await prisma.favorite.findMany({
      where: { userId: user.id }
    })

    console.log(`\nüíñ ${favorites.length} favoris trouv√©s:`)
    favorites.forEach((favorite, index) => {
      console.log(`${index + 1}. ${favorite.name} (${favorite.storefrontId})`)
    })

    // V√©rifier la coh√©rence
    console.log('\nüîç V√©rification de la coh√©rence:')
    for (const favorite of favorites) {
      const consultation = consultedStorefronts.find(c => c.storefrontId === favorite.storefrontId)
      if (consultation) {
        console.log(`‚úÖ ${favorite.name}: Consultation trouv√©e, statut: ${consultation.status}`)
        if (consultation.status !== 'SAVED') {
          console.log(`‚ö†Ô∏è  ${favorite.name}: Statut incorrect (${consultation.status}), mise √† jour vers SAVED`)
          await prisma.consultedStorefront.update({
            where: { id: consultation.id },
            data: { status: 'SAVED' }
          })
        }
      } else {
        console.log(`‚ùå ${favorite.name}: Pas de consultation trouv√©e, cr√©ation...`)
        await prisma.consultedStorefront.create({
          data: {
            storefrontId: favorite.storefrontId,
            name: favorite.name,
            type: 'PARTNER',
            serviceType: 'Prestataire',
            status: 'SAVED',
            userId: user.id
          }
        })
      }
    }

    console.log('\n‚úÖ V√©rification termin√©e!')

  } catch (error) {
    console.error('‚ùå Erreur:', error)
  } finally {
    await prisma.$disconnect()
  }
}

fixConsultedStorefronts() 